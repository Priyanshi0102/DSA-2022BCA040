#include <stdio.h>
#include <stdlib.h>


struct Node {
    int data;
    struct Node* next;
};


struct Node* createNode(int value) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    if (!newNode) {
        printf("Memory allocation failed!\n");
        return NULL;
    }
    newNode->data = value;
    newNode->next = NULL;
    return newNode;
}

void push(struct Node** top, int value) {
    struct Node* newNode = createNode(value);
    if (newNode == NULL) {
        return;
    }
    newNode->next = *top;
    *top = newNode;
    printf("Element %d pushed onto the stack.\n", value);
}


void pop(struct Node** top) {
    if (*top == NULL) {
        printf("Stack underflow! The stack is empty.\n");
        return;
    }
    struct Node* temp = *top;
    *top = (*top)->next;
    printf("Element %d popped from the stack.\n", temp->data);
    free(temp);
}


void peek(struct Node* top) {
    if (top == NULL) {
        printf("The stack is empty.\n");
        return;
    }
    printf("Top element is: %d\n", top->data);
}


int isEmpty(struct Node* top) {
    return top == NULL;
}


void display(struct Node* top) {
    if (top == NULL) {
        printf("Stack is empty.\n");
        return;
    }
    struct Node* temp = top;
    printf("Stack elements: ");
    while (temp != NULL) {
        printf("%d -> ", temp->data);
        temp = temp->next;
    }
    printf("NULL\n");
}


int main() {
    struct Node* stackTop = NULL;
    int choice, value;

    do {
        printf("\nMenu:\n");
        printf("1. Push an element onto the stack\n");
        printf("2. Pop an element from the stack\n");
        printf("3. Peek at the top element\n");
        printf("4. Check if the stack is empty\n");
        printf("5. Display the stack elements\n");
        printf("6. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                printf("Enter the value to push onto the stack: ");
                scanf("%d", &value);
                push(&stackTop, value);
                break;
            case 2:
                pop(&stackTop);
                break;
            case 3:
                peek(stackTop);
                break;
            case 4:
                if (isEmpty(stackTop)) {
                    printf("The stack is empty.\n");
                } else {
                    printf("The stack is not empty.\n");
                }
                break;
            case 5:
                display(stackTop);
                break;
            case 6:
                printf("Exiting the program.\n");
                break;
            default:
                printf("Invalid choice, please try again.\n");
        }
    } while (choice != 6);

    return 0;
}
