#include <stdio.h>
#include <stdlib.h>


struct Node {
    int data;
    struct Node* next;
};


struct Node* createNode(int value) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    if (!newNode) {
        printf("Memory allocation failed!\n");
        return NULL;
    }
    newNode->data = value;
    newNode->next = newNode;  
}


void insertEnd(struct Node** head, int value) {
    struct Node* newNode = createNode(value);
    if (!newNode) return;

    if (*head == NULL) {
        *head = newNode;
    } else {
        struct Node* temp = *head;
        
        while (temp->next != *head) {
            temp = temp->next;
        }
        temp->next = newNode;
        newNode->next = *head; 
    }
    printf("Node with value %d inserted at the end.\n", value);
}


void insertBefore(struct Node** head, int position, int value) {
    if (*head == NULL || position <= 1) {
        printf("Cannot insert before the specified position.\n");
        return;
    }

    struct Node* newNode = createNode(value);
    if (!newNode) return;

    struct Node* temp = *head;
    int count = 1;

    
    while (temp->next != *head && count < position - 1) {
        temp = temp->next;
        count++;
    }

    if (count != position - 1) {
        printf("Position is out of range.\n");
        free(newNode);
        return;
    }

    
    newNode->next = temp->next;
    temp->next = newNode;
    printf("Node with value %d inserted before position %d.\n", value, position);
}


void deleteFirst(struct Node** head) {
    if (*head == NULL) {
        printf("List is empty. No node to delete.\n");
        return;
    }

    if (*head == (*head)->next) {  
        free(*head);
        *head = NULL;
    } else {
        struct Node* temp = *head;
        while (temp->next != *head) { e
            temp = temp->next;
        }
        temp->next = (*head)->next;
        free(*head);
        *head = temp->next;
    }
    printf("First node deleted.\n");
}


void deleteAfter(struct Node** head, int position) {
    if (*head == NULL || position < 1) {
        printf("Invalid position.\n");
        return;
    }

    struct Node* temp = *head;
    int count = 1;

    
    while (temp->next != *head && count < position) {
        temp = temp->next;
        count++;
    }

    if (count != position) {
        printf("Position is out of range.\n");
        return;
    }

    if (temp->next != *head) {
        struct Node* nodeToDelete = temp->next;
        temp->next = nodeToDelete->next;
        free(nodeToDelete);
        printf("Node deleted after position %d.\n", position);
    } else {
        printf("There is no node after position %d.\n", position);
    }
}


void display(struct Node* head) {
    if (head == NULL) {
        printf("The list is empty.\n");
        return;
    }

    struct Node* temp = head;
    printf("Circular Linked List: ");
    do {
        printf("%d -> ", temp->data);
        temp = temp->next;
    } while (temp != head);
    printf("(head)\n");
}


    struct Node* head = NULL;
    int choice, value, position;

    do {
        
        printf("\nCircular Linked List Operations:\n");
        printf("1. Insert node at the end\n");
        printf("2. Insert node before a specified position\n");
        printf("3. Delete the first node\n");
        printf("4. Delete node after a specified position\n");
        printf("5. Display the list\n");
        printf("6. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                printf("Enter the value to insert at the end:
